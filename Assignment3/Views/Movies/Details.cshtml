@model Assignment3.Models.MovieDetails

@{
    ViewData["Title"] = "Details";
}

<h1>Details for @Model.Movie.Title (@Model.Movie.ReleaseDate.ToString("yyyy"))</h1>
<div class="upper-movies">
    <div class="upper-movies-left">
        <h4>Movie</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Movie.Title)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Movie.Title)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Movie.Genre)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Movie.Genre)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Movie.ReleaseDate)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Movie.ReleaseDate)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Movie.ReleasedBy)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Movie.ReleasedBy)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Movie.MovieCover)
            </dt>
            <dd class="col-sm-10">
                @if (Model.Movie.MovieCover != null && Model.Movie.MovieCover.Length > 0)
                {
                    <img src="@Url.Action("GetMovieCover", "Movies", new { id = Model.Movie.Id })" alt="Actor Photo" class="img-thumbnail" />
                }
                else
                {
                    <p>No image available</p>
                }
            </dd>
        </dl>
    </div>
    <form id="addActorForm" onsubmit="false">
    @Html.AntiForgeryToken()
    <div class="upper-movies-right">
        <table class="table add-actor-table" id="addActorsTable">
            @Html.AntiForgeryToken()
            <thead>
                <tr>
                    <th>Actor</th>
                    <th>Picture</th>
                    <th><!-- Placeholder for add btn --></th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Actors.Count > 0)
                {
                    foreach (var result in Model.Actors)
                    {
                        <tr>
                            <td>@result.Name</td>
                            @if (result.ActorPhoto != null && result.ActorPhoto.Length > 0)
                            {
                                <td><img src="@Url.Action("GetActorPhoto", "Actors", new { id = result.Id })" alt="Actor Photo" class="img-thumbnail" /></td>
                            }
                            else
                            {
                                <td><p>No image available</p></td>
                            }
                            
                            <td><button class="btn btn-primary add-actor-btn" data-actor-name="@result.Name" data-movie-title="@Model.Movie.Title" data-actor-id="@result.Id" data-movie-id="@Model.Movie.Id">Add</button></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    </form>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Movie.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

<h2 class="sentiment-header">Overall Sentiment Analysis Score: @Model.OverallSentiment.ToString("F3") (@Model.SentimentString)</h2>

<h3>Sentiment Analysis from Reddit Posts</h3>
<table class="table movie-reddit" id="sentimentTable">
    <thead>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th>Sentiment Score</th>
            <th>Sentiment (string)</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.SentimentResults != null)
        {
            foreach (var result in Model.SentimentResults)
            {
                <tr>
                    <td>@result.Title</td>
                    <td>@result.Content</td>
                    <td>@result.SentimentScore.ToString("F2")</td>
                    <td>@result.SentimentString</td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Modal -->
<div class="modal fade" id="confirmActorModal" tabindex="-1" aria-labelledby="confirmActorModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmActorModalLabel">Add Actor Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to add <span id="actorName"></span> to the movie <span id="movieTitle"></span>?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmAddActorBtn">Confirm</button>
            </div>

        </div>
    </div>
</div>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize DataTables
        let table1 = new DataTable('#sentimentTable', {
            paging: true,
            searching: true,
            ordering: true,
            info: true,
            lengthChange: false,
            pageLength: 10
        });

        let table2 = new DataTable('#addActorsTable', {
            paging: true,
            searching: true,
            ordering: true,
            info: true,
            lengthChange: false,
            pageLength: 5
        });

        // Add event listeners to all add actor buttons
        document.querySelectorAll('.add-actor-btn').forEach(button => {
            button.addEventListener('click', function () {
                let actorName = this.getAttribute('data-actor-name');
                let movieTitle = this.getAttribute('data-movie-title');
                let actorId = this.getAttribute('data-actor-id');
                let movieId = this.getAttribute('data-movie-id');

                document.getElementById('actorName').textContent = actorName;
                document.getElementById('movieTitle').textContent = movieTitle;

                // Store actorId and movieId in confirm button for later use
                document.getElementById('confirmAddActorBtn').setAttribute('data-actor-id', actorId);
                document.getElementById('confirmAddActorBtn').setAttribute('data-movie-id', movieId);

                new bootstrap.Modal(document.getElementById('confirmActorModal')).show();
            });
        });

        document.getElementById('confirmAddActorBtn').addEventListener('click', function (event) {
            event.preventDefault();  // Prevent the form submission

            let actorId = this.getAttribute('data-actor-id');
            let movieId = this.getAttribute('data-movie-id');
            let csrfToken = document.querySelector('form#addActorForm input[name="__RequestVerificationToken"]').value;

            // console.log(actorId, movieId, csrfToken);

            fetch('/ActorMovies/AddActorToMovie', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': csrfToken
                },
                body: JSON.stringify({ actorId: actorId, movieId: movieId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Actor added successfully!');
                        bootstrap.Modal.getInstance(document.getElementById('confirmActorModal')).hide();
                        // Optionally, refresh the page or update the UI to reflect the new state
                    } else {
                        alert('Error adding actor to movie: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An unexpected error occurred.');
                });
        });


    });

</script>
